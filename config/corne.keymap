/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define NAV     3

// todo: make dongle work.
// https://github.com/zmkfirmware/zmk/tree/main/app/boards/shields/corne
// https://github.com/aroum/zmk-enki42

&lt {
    quick-tap-ms = <200>;
    flavor = "balanced";
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    behaviors {
        hm: hold_preferred_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };

        tm: tap_preferred_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        um: tap_preferred_umlaut_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";

            // long press will forward the key to the umlaut macro

            bindings = <&umlaut>, <&kp>;
        };

        umlaut_unshifted: umlaut_unshifted {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LA(U)>, <&kp LA(U)>;

            // the mod-morph will prevent the shift modifier from being sent while sending the umlaut shortcut

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        macro_a_umlaut: macro_a_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp A>, <&macro_press>;

            label = "MACRO_A_UMLAUT";
        };

        macro_u_umlaut: macro_u_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp U>, <&macro_press>;

            label = "MACRO_U_UMLAUT";
        };

        macro_o_umlaut: macro_o_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp O>, <&macro_press>;

            label = "MACRO_O_UMLAUT";
        };

        umlaut: umlaut {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;

            // use the mod-morph behavior to send the umlaut shortcut and then tap the given parameter key

            bindings =
                <&umlaut_unshifted>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt K_COPY ESC   &kp Q        &kp W       &tm LS(LA(N2)) E  &kp R           &kp T              &kp Z        &um U U        &um A I     &um O O     &kp P           &kp BSPC
&mt K_PASTE TAB  &tm LCTRL A  &tm LALT S  &tm LCMD D        &hm LSHFT F     &kp G              &kp H        &hm RSHFT J    &tm RCMD K  &tm RALT L  &tm RCTRL SEMI  &kp SQT
&kp BSLH         &kp Y        &kp X       &kp C             &kp V           &kp B              &kp N        &kp M          &kp COMMA   &kp DOT     &kp FSLH        &kp C_PLAY_PAUSE
                                          &mo NAV           &lt RAISE BSPC  &lt LOWER SPACE    &lt 4 SPACE  &lt RAISE RET  &kp LALT
            >;
        };

        lower_layer {
            bindings = <
&kp GRAVE   &kp N1     &kp N2            &kp N3      &kp N4                &kp N5       &kp N6         &kp N7                 &kp N8         &kp N9                 &kp N0           &kp DELETE
&caps_word  &kp LCTRL  &kp LALT          &kp LCMD    &kp LSHFT             &trans       &kp EQUAL      &hm RSHFT AMPS         &hm RCMD STAR  &hm RALT SINGLE_QUOTE  &hm RCTRL GRAVE  &trans
&trans      &trans     &kp LEFT_BRACKET  &kp LS(N9)  &kp LS(LEFT_BRACKET)  &trans       &kp LS(EQUAL)  &kp LS(RIGHT_BRACKET)  &kp LS(N0)     &kp RIGHT_BRACKET      &kp MINUS        &trans
                                         &trans      &kp BSPC              &kp SPACE    &kp SPACE      &kp RET                &trans
            >;
        };

        raise_layer {
            bindings = <
&kp F12  &kp F1  &kp F2  &kp F3  &kp F4     &kp F5      &macro_a_umlaut  &kp N4     &kp N5  &kp N6  &trans  &trans
&trans   &trans  &trans  &trans  &trans     &trans      &macro_o_umlaut  &kp N1     &kp N2  &kp N3  &trans  &trans
&trans   &trans  &trans  &trans  &trans     &trans      &macro_u_umlaut  &kp N7     &kp N8  &kp N9  &trans  &trans
                         &trans  &kp SPACE  &kp BSPC    &kp RET          &kp SPACE  &kp N0
            >;
        };

        nav_layer {
            bindings = <
&kp C_RESET  &trans     &trans    &trans    &trans     &trans      &trans   &trans     &trans    &trans  &trans     &trans
&trans       &kp LCTRL  &kp LALT  &kp LCMD  &kp LSHFT  &trans      &trans   &kp LEFT   &kp DOWN  &kp UP  &kp RIGHT  &trans
&trans       &trans     &trans    &trans    &trans     &trans      &trans   &trans     &trans    &trans  &trans     &trans
                                  &trans    &kp SPACE  &kp BSPC    &kp RET  &kp SPACE  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &kp N1        &kp N2      &kp N3                &kp N4        &kp N5           &kp N6         &kp N7        &kp N8                 &kp N9            &kp N0     &trans
&trans  &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)         &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)           &kp SINGLE_QUOTE  &kp GRAVE  &trans
&trans  &trans        &kp LBKT    &kp LS(LEFT_BRACKET)  &kp LS(N9)    &trans           &trans         &kp LS(N0)    &kp LS(RIGHT_BRACKET)  &kp RBKT          &kp MINUS  &trans
                                  &trans                &kp BSPC      &kp SPACE        &kp SPACE      &kp RET       &trans
            >;
        };
    };
};
